// test comment
domain DynamicModel {
rim Dynamic {

	event GET {
		method: GET
	}
	event PUT {
		method: PUT
	}
	event POST {
		method: POST
	}
	event DELETE {
		method: DELETE
	}

	command CREATEDynmcNote
	command NoopGET
	command GETDynmcNotes
	command GETDynmcNote
	command DELETEDynmcNote 

initial resource notesDynmc {
	type: collection
	entity: DynmcNote
	view: GETDynmcNotes
	path: "/notesDynmc"
    POST -> createDynmcNote
	GET *-> locator x("{Author}", "Other")/{noteID}
	DELETE *-> deletedDynmcNote
}

resource noteDynmc {
	type: item
	entity: DynmcNote
	view: GETDynmcNote
	path: "/notesDynmc/{noteID}"
	DELETE -> deletedDynmcNote
}

resource deletedDynmcNote {
	type: item
	entity: DynmcNote
	actions [ DELETEDynmcNote ]
	relations [ "http://relations.rimdsl.org/delete" ]
	path: "/notesDynmc/{noteID}"
	GET ->> notesDynmc
}

resource createDynmcNote {
	type: item
	entity: DynmcNote
	actions [ CREATEDynmcNote ]
	path: "/notesDynmc"
	// 'create' means post to the collection, 'new' means get the next available number
	relations [ "http://relations.rimdsl.org/create" ]
	GET --> noteDynmc {
		condition: OK(noteDynmc)
	}
}

}
}