domain RestbucksModel {
rim Restbucks {

	// our Restbucks chain has gone global, lets use a franchise id to identify the individual store
	basepath: "/{franchise}" 

	relation history {
		fqn: "http://relations.restbucks.com/history"
	}
	relation order {
		fqn: "http://relations.restbucks.com/order"
	}
	relation cancel {
		fqn: "http://relations.restbucks.com/cancel"
	}
	relation update {
		fqn: "http://relations.restbucks.com/update"
	}
	relation payment {
		fqn: "http://relations.restbucks.com/payment"
	}

	event DELETE {
		method: DELETE
	}
	event GET {
		method: GET
	}
	event POST {
		method: POST
	}
	event PUT {
		method: PUT
	}

	command CreateEntity
	command DeleteEntity
	command GETEntities
	command GETEntity
	command GETException
	command GETNavProperty
	command GETServiceDocument
	command NoopGET
	command UpdateEntity
	command UpdateCreateEntity

initial resource ServiceDocument {
	type: item
	entity: ServiceDocument
	commands [ GET:GETServiceDocument ] 
	path: "/"
	GET -> Orders
	GET -> Payments
	GET -> shop
}

resource shop {
	type: item
	entity: ServiceDocument
	commands [ GET:NoopGET ] 
	path: "/shop"
	POST -> OrderCreated
	GET -> history
}

// find all orders with same email address
resource history {
	type: item
	entity: Order
	commands [ GET:NoopGET ] 
	relations [ history ]
	path: "/history"
	GET -> Orders {
		parameters [ query="email eq '{email}'" ]
	}
}

resource Orders {
	type: collection
	entity: Order
	commands [ GET:GETEntities {
			properties [ filter="{query}" ]
		}
	]
	path: "/Orders()"
	POST -> OrderCreated
	GET *-> order {
		// not required because 'Id' is a property of the Entity 'Order' so you get this link parameter automatically
		// You specify path parameters or query parameters
		parameters [ Id="{Id}" ]
	}
}

resource order {
	type: item
	entity: Order
	commands [ GET:GETEntity ]
	path: "/Orders({Id})"
	GET -> history {
		parameters [ email = "{email}" ]
	}
	GET -> order_payment {
		title: "Payment"
		condition: OK(order_payment) 
	}
	POST -> PaymentAccepted {
		title: "Make Payment"
		condition: NOT_FOUND(order_payment)
	}
	// Can only update or delete if we haven't paid
	PUT -> OrderUpdated {
		condition: NOT_FOUND(order_payment)
	}
	DELETE -> OrderCancelled {
		condition: NOT_FOUND(order_payment)
	}
}

// uses the 'payment' property on the 'Order' to get the Payment entity
resource order_payment {
	type: item
	entity: Payment
	commands [ 
		GET: GETNavProperty {
			properties [ navproperty="payment", entity=Order ]
		}
	]
	path: "/Orders({Id})/payment"
}

resource OrderCancelled {
	type: item
	entity: Order
	commands [ DELETE:DeleteEntity ]
	relations [ cancel ]
	path: "/Orders({Id})"
}

resource OrderUpdated {
	type: item
	entity: Order
	commands [ PUT:UpdateCreateEntity ]
	relations [ update ]
	path: "/Orders({Id})"
	GET --> order {
		parameters [ Id="{Id}" ]
	}
}

resource OrderCreated {
	type: item
	entity: Order
	commands [ POST:CreateEntity ]
	relations [ order ]
	path: "/Orders()"
	GET --> order {
		condition: OK(order)
	}
}

resource Payments {
	type: collection
	entity: Payment
	commands [ GET:GETEntities ]
	path: "/Payments()"
	GET *-> payment
	GET *-> order {
		title: "Order"
	}
}

resource payment {
	type: item
	entity: Payment
	commands [ GET:GETEntity ]
	path: "/Payments({Id})"
	GET -> order {
		title: "Order"
	}
}

resource PaymentAccepted {
	type: item
	entity: Payment
	commands [ POST:CreateEntity ]
	relations [ payment ]
	path: "/Payments()"
	GET --> payment {
		condition: OK(payment)
	}
}


//resource order_Payment {
//	type: item
//	entity: Payment
//	view: GETNavProperty navproperty="Payment", entity=Order
//	path: "/Orders({id})/Payment"
//}

//resource payment_Order {
//	type: item
//	entity: Order
//	view: GETNavProperty navproperty="Order", entity=Payment
//	path: "/Payments({id})/Order"
//}


}
}
