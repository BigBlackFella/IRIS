##################################################################
## Resource Interaction Model (RIM) DSL velocity template
##################################################################
events
#foreach ( $rimEvent in ${commands.getRimEvents().entrySet()} )
	$rimEvent.getKey() $rimEvent.getValue()
#end
end

commands
#foreach ( $command in $commands.getRIMCommands() )
	$command
#end
end

initial resource ServiceDocument
	item ServiceDocument
	view { GETServiceDocument }
	path "/"
#foreach ( $rsm in $rim.getResourceStateMachines() )
	GET -> ${rsm.getCollectionState().getName()}
#end
#foreach ( $state in $rim.getErrorHandlerStates() )
	GET -> ${state.getName()}
#end
end

#if($rim.hasExceptionState())
exception resource ${rim.getExceptionState().getName()}
	item InteractionException
	view { ${rim.getExceptionState().getView()} }
end
#end

## -----------------------------------------------------
## Error handlers
## -----------------------------------------------------
#foreach ( $state in $rim.getErrorHandlerStates() )
resource ${state.getName()}
	collection ${state.getName()}
	view { ${state.getView()} }
end
#end

## -----------------------------------------------------
## Resource state machines
## -----------------------------------------------------
#foreach ( $rsm in $rim.getResourceStateMachines() )
## ----- Resource state -----
#foreach ( $state in $rsm.getResourceStates() )
#if(!(${state.class.simpleName} == "IMNavigationState" && !$strictOData))## Do not generate nav states if strictOdata=false

#if(${state.class.simpleName} == "IMNavigationState")
resource ${rsm.getEntityState().getName()}_${state.getName()}
#else
resource ${state.getName()}
#end
#if(${state.class.simpleName} == "IMNavigationState" && ${state.isNavigationToCollectionResource()})
	collection ${state.getTargetResourceStateMachine().getEntityName()}
	view { GETEntities filter=filter }
#elseif(${state.class.simpleName} == "IMNavigationState" && !${state.isNavigationToCollectionResource()})
	item ${state.getTargetResourceStateMachine().getEntityName()}
	view { GETNavProperty navproperty="${state.getName()}", entity=${rsm.getEntityName()} }
#elseif(${state.class.simpleName} == "IMCollectionState")
	collection ${rsm.getEntityName()}
#if($strictOData)
	view { $state.getView() }
#else
	view { $state.getView() filter=filter }
#end
#else
	item ${rsm.getEntityName()}
#if(${state.class.simpleName} == "IMPseudoState" && $state.getActions().size() > 0)
	actions { ##
#foreach ( $action in $state.getActions() )
$action## 
#end
 }
#else
	view { $state.getView() }
#end
#end
#if ($state.hasRelations())
	relations { "${state.getRelations()}" }
#end
#if(${state.class.simpleName} == "IMNavigationState")
	path "${rsm.getEntityState().getPath()}/${state.getPath()}"
#else
	path "${state.getPath()}"
#end
## ----- Transitions from an entity-type state or a pseudo state -----
#writeStateTransitions($rsm $state)
## ----- Transitions from collection type navigation state -----
#if(${state.class.simpleName} == "IMNavigationState" && ${state.isNavigationToCollectionResource()})
#writeCollectionStateTransitions($state.getTargetResourceStateMachine() ${state.getTargetResourceStateMachine().getCollectionState()} ${state.getTargetResourceStateMachine().getEntityState()})
#end
## ----- Transitions from an RSM's collection state -----
#if(${state.class.simpleName} == "IMCollectionState")
#writeCollectionStateTransitions($rsm $state $state.getEntityState())
#end
## ----- Error handler -----
#if($state.hasOnError())
	onerror --> ${state.getErrorHandlerState().getName()}
#end
end
#end
#end
#end
##
## -----------------------------------------------------
## writeCollectionStateTransitions
##       Macro to write outgoing transitions on a collection state
## Parameters:
##     $rsm Resource state machine
##     $collectionState Collection state
##     $entityState Entity state 
## -----------------------------------------------------
#macro( writeCollectionStateTransitions $rsm $collectionState $entityState)
#foreach ( $transition in $collectionState.getTransitions() )
#if(${transition.getTargetState().equals($entityState)})
	${transition.getMethod()} ${transition.getTitleAssignment()}*-> ${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}
#end
#end
#foreach ( $transition in $entityState.getTransitions() )
#if(${transition.getTargetState().class.simpleName} == "IMPseudoState" || ${transition.class.simpleName} == "IMStateTransition")
## Collection transition to a pseudo state or a state transition to this RSM's collection state
	${transition.getMethod()} ${transition.getTitleAssignment()}*-> ${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}
#elseif (${transition.class.simpleName} == "IMCollectionStateTransition") 
## Transition to a navigation state representing another RSM's collection state
#if($strictOData)
	${transition.getMethod()} ${transition.getTitleAssignment()}*-> ${entityState.getName()}_${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}, filter="${transition.getFilter()}"
#else
	${transition.getMethod()} ${transition.getTitleAssignment()}*-> ${transition.getTargetResourceStateMachine().getCollectionState().getName()} filter="${transition.getFilter()}"
#end
#elseif(${transition.class.simpleName} == "IMEntityStateTransition")
## Transition to a navigation state representing another RSM's entity state
#if($strictOData)
	${transition.getMethod()} ${transition.getTitleAssignment()}*-> ${entityState.getName()}_${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}
#else
	${transition.getMethod()} ${transition.getTitleAssignment()}*-> ${transition.getTargetResourceStateMachine().getEntityState().getName()} id=${transition.getLinkProperty()}
#end
#end
#end
#end
##
## -----------------------------------------------------
## writeStateTransitions
##       Macro to write outgoing transitions on an entity-type or pseudo state 
## Parameters:
##     $rsm Resource state machine
##     $state Resource state
## -----------------------------------------------------
#macro( writeStateTransitions $rsm $state )
#foreach ( $transition in $state.getTransitions() )
#if (${transition.class.simpleName} == "IMStateTransition" && $transition.isAutoTransition())
## Auto transition from pseudo state
	${transition.getMethod()} --> ${transition.getTargetState().getName()} (OK(${transition.getTargetState().getName()})) id=${rsm.getMappedEntityProperty()}
#elseif($transition.isBoundToCollection() && (${transition.getTargetState().class.simpleName} == "IMPseudoState" || ${transition.class.simpleName} == "IMStateTransition" && ${state.class.simpleName} == "IMCollectionState"))
## Collection transition to a pseudo state or collection state in same RSM
	${transition.getMethod()} ${transition.getTitleAssignment()}-> ${transition.getTargetState().getName()}
#elseif(${transition.class.simpleName} == "IMCollectionStateTransition")
## Transition to a navigation state representing another RSM's collection state
#if($strictOData)
	${transition.getMethod()} ${transition.getTitleAssignment()}-> ${rsm.getEntityState().getName()}_${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}, filter="${transition.getFilter()}"
#else
	${transition.getMethod()} ${transition.getTitleAssignment()}-> ${transition.getTargetResourceStateMachine().getCollectionState().getName()} filter="${transition.getFilter()}"
#end
#elseif(${transition.class.simpleName} == "IMEntityStateTransition")
## Transition to a navigation state representing another RSM's entity state
#if($strictOData)
	${transition.getMethod()} ${transition.getTitleAssignment()}-> ${rsm.getEntityState().getName()}_${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}
#else
	${transition.getMethod()} ${transition.getTitleAssignment()}-> ${transition.getTargetResourceStateMachine().getEntityState().getName()} id=${transition.getLinkProperty()}
#end
#elseif(${state.class.simpleName} != "IMCollectionState")
## Transition to other state
	${transition.getMethod()} ${transition.getTitleAssignment()}-> ${transition.getTargetState().getName()} id=${rsm.getMappedEntityProperty()}
#end
#end
#end