grammar com.temenos.interaction.rimdsl.RIMDsl with org.eclipse.xtext.common.Terminals

generate rim "http://www.temenos.com/interaction/rimdsl/RimDsl"


DomainModel:
    (rims += Ref)*
;

DomainDeclaration:
    'domain' name = QualifiedName '{'
        (rims += Ref)*
    '}'
;
 
Ref:
    DomainDeclaration | ResourceInteractionModel | Use
;

QualifiedName:
    ID ('.' ID)*
;

Use:
    'use' importedNamespace = QualifiedNameWithWildcard
;
  
QualifiedNameWithWildcard:
    QualifiedName '.*'?
;

ResourceInteractionModel:
    'rim' name = ID '{'
        (events += Event)*
        (commands += Command)*
        (states += State)*
    '}'
;

Event:
	'event' name=ID '{' 
     	'method:' httpMethod=ID
    '}'
;

Command:
	'command' name=ID ('{' 
        'properties' '[' ((properties+=CommandProperty) (',' properties+=CommandProperty)* ) ']'
    '}')?
;

CommandProperty:
    name=ID '=' (value=ID | value=STRING)
;

State: 
    (isInitial?='initial' | isException?='exception')? 'resource' name=ID '{'
    	// elements can appear in any order
    	(
            // MUST define a 'type:'
            type=ResourceType
                // MUST define an 'entity:'
                & entity=Entity
               	// MUST define a 'view:' command or 'actions []' commands
                & impl=ImplRef
                // MAY define relations [ { fqn: "http://www.temenos.com/rels/input" }, GlobalRelation ]
                & ('relations' '[' ((relations+=Relation) (',' relations+=Relation)* ) ']')?
                // MAY define a 'path:'
                & path=Path?
                // MAY define one or more transitions
                & transitions+=TransitionRef*
                // MAY define an onerror transition
                & ('onerror' '-->' errorState=[State])?
    	)
    '}'
;

// implementation reference
ImplRef:
	(
		// view: SomeCommand
		('view:' view=ResourceCommand ) 
			// actions [ SomeCommand, AnotherCommand ]
			| ('actions' '[' ((actions+=ResourceCommand) (',' actions+=ResourceCommand)* ) ']')
	)
;

// Order of transitions should be non deterministic
TransitionRef:
    Transition | TransitionForEach | TransitionAuto
;

// create regular transitions
Transition:
    (event=[Event] title=Title? '->' state=[State|QualifiedName] (eval=Expression)?) ((uriLinks+=UriLink)* (',' uriLinks+=UriLink)* )
;

// create foreach transitions
TransitionForEach:
    (event=[Event] title=Title? '*->' state=[State|QualifiedName] (eval=Expression)?) ((uriLinks+=UriLink)* (',' uriLinks+=UriLink)* )
;

// create AUTO transitions
TransitionAuto:
    (event=[Event] '-->' state=[State|QualifiedName] (eval=Expression)?) ((uriLinks+=UriLink)* (',' uriLinks+=UriLink)* )
;

Expression:
    '(' 
        (expressions+=Function) 
        ('&&' (expressions+=Function))* 
    ')'
;

Function: Function_OK|Function_NOT_FOUND;

Function_OK:
    {OKFunction} 'OK' '(' state=[State] ')'
;

Function_NOT_FOUND:
    {NotFoundFunction} 'NOT_FOUND' '(' state=[State] ')'
;

Relation:
    name=STRING    
;

Path:
    'path:' name=STRING
;


ResourceType:
    'type:' ((isCollection?='collection') | (isItem?='item'))
;

Entity:
    'entity:' name=ID
;

ResourceCommand:
    (command=[Command] ((parameters+=CommandProperty)* (',' parameters+=CommandProperty)* ))
;

UriLink:
    (templateProperty=ID '=' entityProperty=UriLinkage)
;

UriLinkage:	UriLinkageEntityKeyReplace | UriLinkageProperty;

UriLinkageEntityKeyReplace:
	{UriLinkageEntityKeyReplace} name=ID
;

UriLinkageProperty:
	{UriLinkageProperty} name=STRING 
;

Title:
    'title' '=' name=STRING    
;
