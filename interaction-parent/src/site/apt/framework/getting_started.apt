 -----
 Getting started
 -----
 IRIS Team
 -----
 -----


Building IRIS
~~~~~~~~~~~~~~~~~~~~

  [[1]] Get the latest IRIS snapshot
  
	<<https://github.com/aphethean/IRIS>>
	
  [[4]]	Build and install IRIS to the local maven repository
  
	<<$ mvn clean install>>


* Skipping integration tests
~~~~~~~~~~~~~~~~~~~~
  <<mvn install>> by default runs integration tests. To skip integration tests specify the <<debug>> property:
  
  <<$ mvn install -Ddebug>>

  
Creating a sample responder
~~~~~~~~~~~~~~~~~~~~
  This section describes how use the interaction SDK to facilitate the creation of resource
  instances for the resource model. The interaction SDK depends on the interaction framework
  libraries. These libraries are not yet available on a public repository and must be installed
  into the local repository. Either install them manually or build the IRIS project manually
  as described in the previous section.

  [[1]]	Create a mock responder project, e.g. <FlightResponder> with package name <com.mycorp.airtraffic>:

	<<$ mvn archetype:generate -DgroupId=>><com.mycorp.airtraffic><< -DartifactId=>><FlightResponder><< -DarchetypeGroupId=com.temenos.interaction -DarchetypeArtifactId=interaction-sdk-archetype -DarchetypeVersion=0.0.2-SNAPSHOT -DinteractiveMode=false>>

	This command will create a subdirectory named FlightResponder which contains a maven project
	with the following artifacts:
		
		* WEB-INF/web.xml
		
		* service.edmx
		
		[]

  [[2]]	Edit the sample EDMX file to define the entity model.
  
  [[3]] Build the FlightReponder
  
	<<$ mvn interaction-sdk:gen>>

	This command will generate the artefacts for
	
		* [<<spring configuration file>>] Defines the resource model with the respective
		  commands used to access the resource managers. This Interaction SDK creates a
		  Mock responder with OData commands that access a JPA producer:
		
----------  
 	 <bean id="producer" class="org.odata4j.producer.jpa.JPAProducer">
		<constructor-arg name="emf" ref="entityManagerFactory" />
		<constructor-arg name="namespace" value="MockResponderSDK" />	
		<constructor-arg name="maxResults" value="100" />			
	  </bean>
----------  
		  
		* [<<JPA producer>>] These artefacts are JPA artefacts which are configured to provide
		  a mock responder with data stored inside an in-memory HSQL database .
		
		[]
		
	Artefacts:
	
		* META-INF
		
			* Persistence.xml
			
			* responder_insert.sql
			
			* spring-beans.xml
			
			
		* Test responder JPA classes
		
			* Flight.java
			
			* Airport.java
			
			* etc.
			
	It is useful to generate a JPA based mock responder for testing or providing out
	generic  behaviour. Switching resource instances to use a different resource manager should be
	as simple as changing the producer property in the spring configuration file.

    [Note:] The JPA classes, persistence.xml and responder_insert.sql apply to the <<JPA producer>>.
    If we wire up our resources to a different producer these artifacts would not be required. 

  [[4]] Start the FlightReponder with an in-built Jetty web server
  
	<<$ mvn jetty:run>>

  [[5]] Access the FlightReponder
  
    [[A]] Service document:        {{http://localhost:8080/responder/FlightResponder.svc}}
    
    [[B]] Metadata document:       {{http://localhost:8080/responder/FlightResponder.svc/$metadata}}
    
    [[C]] Flights feed:            {{http://localhost:8080/responder/FlightResponder.svc/Flight}}
    
    [[D]] Flight entry:            {{http://localhost:8080/responder/FlightResponder.svc/Flight(1)}}
    

  [[6]] Create the FlightResponder web application archive
  
	<<$ mvn package>>

