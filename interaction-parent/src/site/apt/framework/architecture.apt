 -----
 IRIS Technical Architecture
 -----
 IRIS Team
 -----
 -----

IRIS Technical Architecture
~~~~~~~~~~~~~~

  The following sections describe the runtime and design time architecture used in IRIS.

* Runtime
~~~~~~~~~~~~~~~~~~~~

  The Java interaction framework will be based on JAX-RS and it is desirable
  to be able to configure the JAX-RS implementation to the appropriate implementation
  supplied with the JEE application server. Our research has found the Apache Wink
  library to be most appropriate, mainly for its DynamicResource extensions to JAX-RS.
  Moving away from this DynamicResource definition will require code generation at 
  design time.  On the Microsoft stack we will implement the interaction framework with
  the WebAPI REST library. 

[../images/runtime_architecture.png]

  The interaction framework exposes resources which handle user agent requests containing
  resource representations different media formats such as atom+xml, hal+json, hal+xml etc. 
  The message handlers use <Providers> to serialize / de-serialize these representations
  into a conceptual model (<Entity>). <Controllers> will process these entities which only
  contain structural information. In order to execute business functions it uses the 
  <resource model> to drive the interactions. The <commands> are responsible for invoking
  the resource managers to process the request.


* Design Time
~~~~~~~~~~~~~~~~~~~~

  The <<Resource model>> is defined by the following design-time artifacts:

		* <<Entity model>> - defines entities and their properties as a list of <vocabulary terms>. These
		     terms describe if a property is e.g. a number or whether it a mandatory field. The <<metadata.xml>> 
		     DSL describes the entity model and is loaded at runtime.
		
		* <<Interaction model>> - defines the resource states and the transitions between those states.
  		     This model is specified as a conceptual model by the <<Behaviour>> class.

		* <<Runtime configuration>> - configures the resource model, defines how IRIS commands map to
  		     different resources and to different resource manager. 
 		     
    	[]
    	
  The <Interaction SDK> enables users to generate these design-time artifacts from an existing EDMX file.
  Please refer to the <Getting started> section for further information.

  Existing T24 clients and T24 Model Bank migration to this model will be accelerated by using
  a T24 introspection component to obtain the resources and relationships already defined in T24.

[../images/designtime_architecture.png]


* Hypermedia enabled resource representations
~~~~~~~~~~~~~~~~~~~~

  A User Agent can request resources in different formats (representations) by specifying the
  Accept header  when requesting the resource.  These resource requests are directed to an
  appropriate resource model which is responsible for returning data fields and associations
  (essentially links to related resources). The data fields and links for a model have been
  decided at design time and the data for a model is funded by calling the configured the <commands>.
  It is the <command>’s responsibility to transforms this model request into an appropriate
  message for a target Resource Manager.  The interaction framework controls the application
  state is by generating resource representations with links that can be used by the User Agent
  to change to the next application state.

