 -----
 Creating a sample responder
 -----
 IRIS Team
 -----
 -----


Creating a sample responder
~~~~~~~~~~~~~~~~~~~~
  This section describes how use the interaction SDK to create REST services from an existing EDMX model.  
  The archetype provided with IRIS facilitates creating the initial project structure with a sample EDMX file
  based on an Airline sample. The generated project can either be run directly through maven by hosting it on
  a Jetty web server, or it may be packaged as a WAR file for deployment on other web servers.
  
  As a prerequisites it is necessary to configure the Maven settings.xml file as described in the <Getting started> section.
  Building or having IRIS installed into the local repository is not required and will be download automatically from the
  Maven repository.

  [[1]]	Create the Airline project skeleton by running the archetype:

	<<$ mvn archetype:generate -DgroupId=>><com.mycorp.airtraffic><< -DartifactId=>><FlightResponder><< -DarchetypeRepository=http://maven.oams.com/content/groups/all/ -DarchetypeGroupId=com.temenos.interaction -DarchetypeArtifactId=interaction-sdk-archetype -DarchetypeVersion=0.1.0 -DinteractiveMode=false>>

	This command will create a subdirectory named FlightResponder which contains a maven project
	with the following artifacts:
		
		* WEB-INF/web.xml and application server specific deployment descriptors
		
		* service.edmx
		
		[]

  [[2]]	Edit the sample EDMX file to define the entity model.
  
      [Note:] The entity name (on the container) currently has to match the name of the entity type. Schemas other than the conceptual model (i.e. data storage, design, etc. schemas) should be removed. 
  
  
  [[3]] Build the FlightReponder
  
	<<$ mvn interaction-sdk:gen>>

	This command will generate the design-time artifacts mentioned in the <architecture> section.

		* <<metadata.xml>> - define entities and their properties as vocabulary terms
		
		* <<Behaviour.java>> - defines the resource states and the transitions between those states 
	
		* <<spring-beans.xml>> - defines the runtime configuration of the resource model 
		  with the respective commands used to access the resource managers.
		
		* <<JPA producer>> - JPA classes and configuration files (jpa-persistence.xml, responder_insert.sql, resourcemanager-context.xml)
		  to provide a mock responder with data stored inside an in-memory HSQL database.

		* <<responder.properties>> - Responder configuration.
		
		[]
		
	It is useful to generate a JPA based mock responder for testing or providing out
	generic  behaviour. Switching resource instances to use a different resource manager should be
	as simple as changing the producer property in the spring configuration file.

    [Note:] The JPA classes, jpa-persistence.xml, resourcemanager-context.xml and responder_insert.sql apply to the <<JPA producer>>.
    If we wire up our resources to a different producer these artifacts would not be required. 

  [[4]] Start the FlightReponder with an in-built Jetty web server
  
	<<$ mvn jetty:run>>

  [[5]] Access the FlightReponder
  
    [[A]] Service document:        {{http://localhost:8080/responder/FlightResponder.svc}}
    
    [[B]] Metadata document:       {{http://localhost:8080/responder/FlightResponder.svc/$metadata}}
    
    [[C]] Flights feed:            {{http://localhost:8080/responder/FlightResponder.svc/Flight}}
    
    [[D]] Flight entry:            {{http://localhost:8080/responder/FlightResponder.svc/Flight(1)}}
    

  [[6]] Create the FlightResponder web application archive
  
	<<$ mvn package>>

* Switching to an existing database 
~~~~~~~~~~~~~~~~~~~~
  This section describes the steps required to switch from an auto-populated in-memory HSQL database to an existing Oracle database.
  
  [[1]]	Download and install the <<Oracle JDBC driver>> into the Maven repository

	<<mvn install:install-file -DgroupId=>><com.oracle><< -DartifactId=>><ojdbc6><< -Dversion=>><11.1.0.7.0><< -Dpackaging=jar -Dfile=>><ojdbc6.jar><< -DgeneratePom=true>>

  [[2]]	Update <<pom.xml>> project dependencies to add the JDBC driver into the project.

----------  
	<dependency>
		<groupId>com.oracle</groupId>
		<artifactId>ojdbc6</artifactId>
		<version>11.1.0.7.0</version>
		<type>jar</type>
		<scope>runtime</scope>
	</dependency>
----------  

  [[3]]	Update <<responder.properties>> to configure the database connection properties.

----------  
	# Database - connection properties
	jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
	jdbc.url=jdbc:oracle:thin:@10.44.5.93:1521:ABNPOC
	jdbc.username=po
	jdbc.password=po

	# Database - hibernate properties
	hibernate.dialect = org.hibernate.dialect.OracleDialect
	hibernate.hbm2ddl.auto = update
----------  
		[Note:] Set hbm2ddl.auto to <validate> once the schema has been created to prevent hibernate from changing it.

  [[4]] Remove all INSERT statements from the <<responder_insert.sql>> to avoid adding mock data to the existing database.
