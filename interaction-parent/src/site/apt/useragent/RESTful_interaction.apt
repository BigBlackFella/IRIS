 -----
 User agent interaction
 -----
 IRIS Team
 -----
 -----

Enabling user agent interaction with a\
HATEOAS based REST application architecture - IRIS
~~~~~~~~~~~~~~

  This document is aimed at user agent development teams and is intended to provide guidelines on
  using IRIS as the interaction framework. Many non-RESTful user interfaces are generally based
  on MVC architectures which use message based communication or invoke a service operation on a
  resource manager to obtain data or trigger an action. In order to leverage the potential of a
  RESTful architectures such as IRIS, user agents developers need to
  
  		* Define the resource model.
  		
  		* Modify the user agent to access these resources
  		
    	[]
  The <<resource model>> is defined - in addition to resource specific information - by an <<entity model>> 
  which specifies the structural part and by an <<interaction model>> which specifies the behaviour,
  i.e. the interactions between resources. 

  There are different levels of REST applications,
  simple ones simply access the data of a resource. More complex applications define a model with 
  links between resources, define resource behavior and provide resource representations in multiple 
  media formats. These type of application use hypermedia to drive the application state (HATEOAS).


* Approach
~~~~~~~~~~~~~~~~~~~~

  This document discusses the resource model and presents the tooling intented to assist with creating
  an application which exposes REST services.

[../images/component_diagram.png] Components

  
* Defining the resource model
~~~~~~~~~~~~~~~~~~~~

  Assume a scenario in which an existing UI uses a messaging based model to retrieve some data.
  The UI has to send a request to invoke an operation, e.g. <getAddress(postcode)> and then parse
  the response. One of the fields returned by <getAddress()> is the <Country> field.

  It would make sense to create a resource model for this type of scenario with two separate
  resources for Address and Country, and define an association between these resources. The
  resource path could be
  
-------------
    /Address                                    Return all addresses
    /Address?filter=postcode eq ‘HP2 4NW’       Return address at postcode HP2 4NW
    /Address/1                                  Return address with id ‘1’
    /Country/UK                                 Return country UK
-------------

  A resource representation (e.g. odata feed) would contain a link from a particular address
  to a resource representation of the country to which this address belongs to.
  
+-----------------------------------+
  ?xml version="1.0" encoding="UTF-8"?>
  <feed xml:base="http://localhost:8080/responder/rest/" xmlns="http://www.w3.org/2005/Atom"
  xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"
  xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices">
      <title type="text">Address</title>
      <id>http://localhost:8080/responder/rest/Address</id>
      <updated>2012-02-22T14:23:59Z</updated>
      <link rel="self" title="Address" href="Address"/>
      <entry>
          <id>http://localhost:8080/responder/rest/Address(1L)</id>
          <title type="text"/>
          <updated>2012-02-22T14:23:59Z</updated>
          <author>
              <name/>
          </author>
          <link rel="edit" title="Address" href="Address(1L)"/>
          <link rel="http://schemas.temenos.com/Country" type="application/atom+xml;type=feed" title="Country" href="Address(‘UK’)/Country" />
          <category term="MockResponderSDKModel.Address" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/>
          <content type="application/xml">
              <m:properties>
                  <d:county>Hertfordshire</d:county>
                  <d:line1>Maylands Avenue</d:line1>
                  <d:district>Dacorum</d:district>
                  <d:country>UK</d:country>
                  <d:line2/>
                  <d:postcode>HP2 4NW</d:postcode>
                  <d:town>Hemel Hempstead</d:town>
                  <d:id m:type="Edm.Int64">1</d:id>
              </m:properties>
          </content>
      </entry>
      .......
+-----------------------------------+

  The OData specification proposes the metadata of data services, i.e. the entity model, to be
  defined in an .edmx file which in our example would be:

+-----------------------------------+
  <?xml version="1.0" encoding="utf-8"?>
  <edmx:Edmx Version="1.0" xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata">
      <edmx:DataServices m:DataServiceVersion="1.0">
	  <Schema xmlns="http://schemas.microsoft.com/ado/2006/04/edm" Namespace="com.temenos.ebank.AcquisitionResponder">
  	    <EntityType Name="Address">
	  	<Key>
		    <PropertyRef Name="id"></PropertyRef>
		</Key>
		<Property Name="id" Type="Edm.Int64" Nullable="false"></Property>
		<Property Name="country" Type="Edm.String" Nullable="true"></Property>
		<Property Name="line1" Type="Edm.String" Nullable="true"></Property>
		<Property Name="line2" Type="Edm.String" Nullable="true"></Property>
		<Property Name="county" Type="Edm.String" Nullable="true"></Property>
		<Property Name="district" Type="Edm.String" Nullable="true"></Property>
		<Property Name="town" Type="Edm.String" Nullable="true"></Property>
		<Property Name="postcode" Type="Edm.String" Nullable="true"></Property>
		<NavigationProperty Name="AddressFeed" Relationship="com.temenos.ebank.AcquisitionResponder.FK_Address_AddressFeed" FromRole="Address" ToRole="AddressFeed"></NavigationProperty>
		<NavigationProperty Name="Country" Relationship="com.temenos.ebank.AcquisitionResponder.FK_Address_Country" FromRole="Address" ToRole="Country"></NavigationProperty>
	    </EntityType>
	    <EntityType Name="Country">
		<Key>
		    <PropertyRef Name="code"></PropertyRef>
		</Key>
		<Property Name="code" Type="Edm.String" Nullable="false"></Property>
		<Property Name="languageCode" Type="Edm.String" Nullable="true"></Property>
		<Property Name="label" Type="Edm.String" Nullable="true"></Property>
	    </EntityType>
	    <Association Name="FK_Address_AddressFeed">
		<End Role="Address" Type="com.temenos.ebank.AcquisitionResponder.Address" Multiplicity="*"></End>
		<End Role="AddressFeed" Type="com.temenos.ebank.AcquisitionResponder.Address" Multiplicity="0..1"></End>
	    </Association>
	    <Association Name="FK_Address_Country">
		<End Role="Country" Type="com.temenos.ebank.AcquisitionResponder.Country" Multiplicity="1"></End>
		<End Role="Address" Type="com.temenos.ebank.AcquisitionResponder.Address" Multiplicity="1"></End>
	  </Association>
	</Schema>
     ....
    </edmx:DataServices>
  </edmx:Edmx>
+-----------------------------------+

  [Note:] The Address.Country  field in this example has been declared as a simple String type.
  Ideally we would declare it as a complex type of type Country.


* Creating a sample application
~~~~~~~~~~~~~~~~~~~~
  Use the <<Interaction SDK>> to facilitate the creation of resource instances for the resource model
  defined in the previous section. Refer to the <Getting started> page for further details on
  creating a mock responder.

  Create a mock responder project, e.g. AcquisitionResponder, and edit the sample EDMX file as
  proposed in the previous section. This responder will have 2 test responder JPA classes 

     * Address.java
     
     * Country.java
     
     []
     

  
