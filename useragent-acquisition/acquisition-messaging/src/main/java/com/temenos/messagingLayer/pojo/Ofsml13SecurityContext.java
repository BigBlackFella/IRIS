//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0-b26-ea3 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.06.20 at 02:21:10 PM IST 
//

package com.temenos.messagingLayer.pojo;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlMixed;
import javax.xml.bind.annotation.XmlType;

import org.w3c.dom.Element;

/**
 * 
 * Consists of either a sign on context (T24 user name and password), a simple nick-name (from a security sub-system) or
 * an external
 * definition (reserved for future use). The contents of the security context may be encrypted by specifying the
 * 'encrypt' attribute
 * as 'true'. For more information on encryption capabilities, please check the related Temenos Open Connectivity
 * Framework (TOCF)
 * documentation. Where an external element definition is utilised, a Schema must be supplied and parsing errors will
 * cause an ofsFault.
 * An empty element may be utilised as a deferred directive; in this case, credentials should be supplied by a separate
 * stage in
 * the message generation and/or submission. Note the target company of the request message may be specified separately
 * from any
 * of the options for security credentials.
 * 
 * 
 * <p>
 * Java class for ofsml13SecurityContext complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ofsml13SecurityContext">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice minOccurs="0">
 *           &lt;sequence>
 *             &lt;element name="userName" type="{http://www.temenos.com/T24/OFSML/130}ofsml13NillableToken"/>
 *             &lt;element name="password" type="{http://www.temenos.com/T24/OFSML/130}ofsml13NillableToken" minOccurs="0"/>
 *           &lt;/sequence>
 *           &lt;element name="nickName" type="{http://www.w3.org/2001/XMLSchema}token"/>
 *           &lt;any/>
 *         &lt;/choice>
 *         &lt;element name="company" type="{http://www.temenos.com/T24/OFSML/130}ofsml13NillableToken" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="encrypt" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ofsml13SecurityContext", propOrder = { "content" })
public class Ofsml13SecurityContext {

	@XmlElementRefs({
			@XmlElementRef(name = "userName", namespace = "http://www.temenos.com/T24/OFSML/130", type = JAXBElement.class),
			@XmlElementRef(name = "password", namespace = "http://www.temenos.com/T24/OFSML/130", type = JAXBElement.class),
			@XmlElementRef(name = "nickName", namespace = "http://www.temenos.com/T24/OFSML/130", type = JAXBElement.class),
			@XmlElementRef(name = "company", namespace = "http://www.temenos.com/T24/OFSML/130", type = JAXBElement.class) })
	@XmlMixed
	@XmlAnyElement(lax = true)
	protected List<Object> content;
	@XmlAttribute
	protected Boolean encrypt;

	/**
	 * 
	 * Consists of either a sign on context (T24 user name and password), a simple nick-name (from a security
	 * sub-system) or an external
	 * definition (reserved for future use). The contents of the security context may be encrypted by specifying the
	 * 'encrypt' attribute
	 * as 'true'. For more information on encryption capabilities, please check the related Temenos Open Connectivity
	 * Framework (TOCF)
	 * documentation. Where an external element definition is utilised, a Schema must be supplied and parsing errors
	 * will cause an ofsFault.
	 * An empty element may be utilised as a deferred directive; in this case, credentials should be supplied by a
	 * separate stage in
	 * the message generation and/or submission. Note the target company of the request message may be specified
	 * separately from any
	 * of the options for security credentials.
	 * Gets the value of the content property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
	 * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
	 * the content property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getContent().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link JAXBElement }{@code <}{@link Ofsml13NillableToken }
	 * {@code >} {@link Object } {@link JAXBElement }{@code <}{@link String }{@code >} {@link JAXBElement }{@code <}
	 * {@link Ofsml13NillableToken }{@code >} {@link String } {@link JAXBElement }{@code <}{@link Ofsml13NillableToken }
	 * {@code >} {@link Element }
	 * 
	 * 
	 */
	public List<Object> getContent() {
		if (content == null) {
			content = new ArrayList<Object>();
		}
		return this.content;
	}

	/**
	 * Gets the value of the encrypt property.
	 * 
	 * @return
	 *         possible object is {@link Boolean }
	 * 
	 */
	public boolean isEncrypt() {
		if (encrypt == null) {
			return false;
		} else {
			return encrypt;
		}
	}

	/**
	 * Sets the value of the encrypt property.
	 * 
	 * @param value
	 *            allowed object is {@link Boolean }
	 * 
	 */
	public void setEncrypt(Boolean value) {
		this.encrypt = value;
	}

}
