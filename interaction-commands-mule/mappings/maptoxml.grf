<?xml version="1.0" encoding="UTF-8"?><Graph author="aphethean" created="Mon Mar 25 09:54:56 GMT 2013" guiVersion="3.3.0.M2" id="1364208389441" licenseCode="Unlicensed" licenseType="Commercial" modified="Mon Mar 25 09:54:56 GMT 2013" modifiedBy="aphethean" name="MapToXML" revision="1.0" showComponentDetails="false">
<Global>
<Metadata __sourcePath="{}/inputMetadata" _dataStructure="OBJECT" _id="__id" _type="Input" id="5a75d555-3c55-4bef-8a4a-466a296e692c">
<Record fieldDelimiter="|" label="inputMetadata" name="inputMetadata" recordDelimiter="&#10;" type="delimited">
<Field __artificialType="_id" __systemManaged="true" name="__id" type="string"/>
<Field __sourcePath="{}/inputMetadata/name" containerType="" label="name" name="name" type="string"/>
<Field __sourcePath="{}/inputMetadata/description" containerType="" label="description" name="description" type="string"/>
</Record>
</Metadata>
<Metadata __sourcePath="{=}/example" _dataStructure="OBJECT" _id="__id" _type="Output" id="Metadata0">
<Record fieldDelimiter="|" name="exampleType" recordDelimiter="&#10;" type="delimited">
<Field __artificialType="_id" __systemManaged="true" name="__id" type="string"/>
<Field __sourcePath="{=}/example/name" containerType="" label="name" name="name" type="string"/>
<Field __sourcePath="{=}/example/description" containerType="" label="description" name="description" type="string"/>
</Record>
</Metadata>
<Dictionary>
<Entry id="DictionaryEntry0" input="true" name="inputPayload" output="false" type="object"/>
<Entry id="DictionaryEntry1" input="false" name="outputPayload" output="true" type="object"/>
</Dictionary>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="dict:inputPayload" guiHeight="0" guiName="Maps / List of Maps  READER" guiWidth="0" guiX="20" guiY="20" id="BEAN_READER0" type="BEAN_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Context outPort="0" sequenceField="__id" xpath=".">
  <Mapping cloverField="name" trim="true" xpath="name"/>
  <Mapping cloverField="description" trim="true" xpath="description"/>
</Context>
]]></attr>
<attr name="_data_format"><![CDATA[MAP]]></attr>
</Node>
<Node enabled="enabled" fileURL="dict:outputPayload" guiHeight="0" guiName="XML WRITER" guiWidth="0" guiX="900" guiY="20" id="EXT_XML_WRITER0" type="EXT_XML_WRITER" xmlSchemaURL=".\src\test\resources\example.xsd">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<example xmlns:clover="http://www.cloveretl.com/ns/xmlmapping" clover:inPort="0">
  <name>$0.name</name>
  <description>$0.description</description>
</example>]]></attr>
<attr name="_data_format"><![CDATA[XML]]></attr>
</Node>
<Node enabled="enabled" guiHeight="0" guiName="inputMetadata_to_example" guiWidth="0" guiX="460" guiY="20" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.__id=$in.0.__id;
	$out.0.name=$in.0.name;
	$out.0.description=$in.0.description;
		return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="true" fromNode="BEAN_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="5a75d555-3c55-4bef-8a4a-466a296e692c" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
<Edge debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_XML_WRITER0:0"/>
</Phase>
</Graph>
